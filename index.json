[{"content":"Introduction Looking to maximize your Monero mining profits? This guide will show you how to increase your earnings using the Zorroware XMRig fork and MoneroOcean\u0026rsquo;s algorithm switching.\nSetting up Zorroware\u0026rsquo;s XMRig fork Using Linux is recommended, as many of Zorroware XMRig\u0026rsquo;s performance advantages are not available on other platforms.\nSupport for our fork will not be guaranteed from the XMRig developers or MoneroOcean.\nDownloading Clone the Git repository using the following command, or download it as a ZIP.\ngit clone https://github.com/zorroware/xmrig-zw.git --depth=1 Compiling Windows If you\u0026rsquo;re building on Windows, follow the instructions here.\nNote that many of Zorroware XMRig\u0026rsquo;s features will be missing, such as the Clang compiler and auto-compiling libraries.\nLinux If you\u0026rsquo;re building on Linux, you will need to install a minimum of the dependencies listed in the \u0026ldquo;Advanced Build\u0026rdquo; section of the XMRig build documentation for your distribution.\nAfter the dependencies are installed, it\u0026rsquo;s literally as simple as executing one of the shell scripts we\u0026rsquo;ve made.\nIf you want a full XMRig suite, run ./full_build.sh\nIf you want an XMRig binary for plain old CPU mining, run ./lite_build.sh (recommended)\nIf all goes well, you should have an XMRig binary in the build directory.\nSetting up the miner Download a copy of our config template and place it in the same directory as the XMRig executable.\nReplace \u0026ldquo;YOUR_WALLET_ADDRESS\u0026rdquo; with your wallet address, and run the miner with sudo/administrator privileges.\nYour MoneroOcean dashboard will be located at https://moneroocean.stream/\nConclusion Thanks for reading, and hopefully this helped you.\n","permalink":"https://zorroware.github.io/posts/zorroware-xmrig/","summary":"Introduction Looking to maximize your Monero mining profits? This guide will show you how to increase your earnings using the Zorroware XMRig fork and MoneroOcean\u0026rsquo;s algorithm switching.\nSetting up Zorroware\u0026rsquo;s XMRig fork Using Linux is recommended, as many of Zorroware XMRig\u0026rsquo;s performance advantages are not available on other platforms.\nSupport for our fork will not be guaranteed from the XMRig developers or MoneroOcean.\nDownloading Clone the Git repository using the following command, or download it as a ZIP.","title":"Maximizing Your Monero Mining Profits"},{"content":"The Actual Command dd if=INPUT of=OUTPUT bs=128k oflag=direct status=progress Explanation The flags used in the custom command are optimized for speed and correctness. It bypasses the kernel cache and uses a large block size to get performance that usually outperforms dd\u0026rsquo;s defaults.\noflag=direct makes dd use direct I/O, avoiding the cache entirely, ensuring that bytes are written immediately. This flag almost always hurts performance tremendously, however setting a large block size fixes this issue, and in many cases makes it even faster than with the cache.\nFrom my research, a block size of 128kb (indicated by the bs=128k flag) is optimal for drives, but you can experiment on your own to find the setting that works best for you.\nConclusion Hopefully this blog post is useful to you. Happy imaging!\n","permalink":"https://zorroware.github.io/posts/optimized-dd/","summary":"The Actual Command dd if=INPUT of=OUTPUT bs=128k oflag=direct status=progress Explanation The flags used in the custom command are optimized for speed and correctness. It bypasses the kernel cache and uses a large block size to get performance that usually outperforms dd\u0026rsquo;s defaults.\noflag=direct makes dd use direct I/O, avoiding the cache entirely, ensuring that bytes are written immediately. This flag almost always hurts performance tremendously, however setting a large block size fixes this issue, and in many cases makes it even faster than with the cache.","title":"Optimized dd Command For Drives"},{"content":"This is where the Zorroware team will post updates, tutorials, and other content.\n","permalink":"https://zorroware.github.io/posts/welcome/","summary":"This is where the Zorroware team will post updates, tutorials, and other content.","title":"Welcome to the Zorroware blog!"},{"content":"Welcome to our about page! Thanks for showing interest.\nZorroware is a group of free (as in freedom) software developers focused on quality.\nThe Team:  Reperak, founder and owner ZtereoHYPE, member  Our Projects:  Initium, a Discord bot template written in Java that\u0026rsquo;s designed to make developing scalable and high-performance Discord bots easy. Fabric Optimization Mod List, a list of mods for Minecraft using the Fabric modding toolchain that improve performance with little to no compromises. Zorroware XMRig, a fork of MoneroOcean\u0026rsquo;s fork of XMRig that focuses on bleeding edge technology, high optimization, and maximum profits. It\u0026rsquo;s tuned for performance right out of the box and builds dependencies straight from their Git repositories! It utilizes Clang as a compiler and includes multiple scripts to automatically build it for you. Check out our guide for setting it up.  ","permalink":"https://zorroware.github.io/about/","summary":"Welcome to our about page! Thanks for showing interest.\nZorroware is a group of free (as in freedom) software developers focused on quality.\nThe Team:  Reperak, founder and owner ZtereoHYPE, member  Our Projects:  Initium, a Discord bot template written in Java that\u0026rsquo;s designed to make developing scalable and high-performance Discord bots easy. Fabric Optimization Mod List, a list of mods for Minecraft using the Fabric modding toolchain that improve performance with little to no compromises.","title":"About"}]